[
["data-manipulation-with-dplyr.html", "Section 3 Data manipulation with dplyr 3.1 Introduction 3.2 Example data of the day 3.3 Select variables with select() 3.4 Select observations with filter() 3.5 Create new variables with mutate() 3.6 Grouped results with group_by() and summarise() 3.7 Scoped variables 3.8 More !", " Section 3 Data manipulation with dplyr # load the tidyverse library(tidyverse) ## ── Attaching packages ────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.3.0 ✓ purrr 0.3.4 ## ✓ tibble 3.0.1 ✓ dplyr 0.8.5 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.5.0 ## ── Conflicts ───────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() 3.1 Introduction Reminders from last weeks: pipe operator, tidy tables, ggplot Why dplyr ? dplyr vs base R 3.2 Example data of the day Through this tutorial, we will be using mammal trait data from the Phylacine database. The dataset contains information on mass, diet, life habit, etc, for more than all living species of mammals. Let’s have a look. phylacine &lt;- readr::read_csv(&quot;data/phylacine_traits.csv&quot;) phylacine ## # A tibble: 5,831 x 24 ## Binomial.1.2 Order.1.2 Family.1.2 Genus.1.2 Species.1.2 Terrestrial Marine ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abditomys_l… Rodentia Muridae Abditomys latidens 1 0 ## 2 Abeomelomys… Rodentia Muridae Abeomelo… sevia 1 0 ## 3 Abrawayaomy… Rodentia Cricetidae Abrawaya… ruschii 1 0 ## 4 Abrocoma_be… Rodentia Abrocomid… Abrocoma bennettii 1 0 ## 5 Abrocoma_bo… Rodentia Abrocomid… Abrocoma boliviensis 1 0 ## 6 Abrocoma_bu… Rodentia Abrocomid… Abrocoma budini 1 0 ## 7 Abrocoma_ci… Rodentia Abrocomid… Abrocoma cinerea 1 0 ## 8 Abrocoma_fa… Rodentia Abrocomid… Abrocoma famatina 1 0 ## 9 Abrocoma_sh… Rodentia Abrocomid… Abrocoma shistacea 1 0 ## 10 Abrocoma_us… Rodentia Abrocomid… Abrocoma uspallata 1 0 ## # … with 5,821 more rows, and 17 more variables: Freshwater &lt;dbl&gt;, ## # Aerial &lt;dbl&gt;, Life.Habit.Method &lt;chr&gt;, Life.Habit.Source &lt;chr&gt;, ## # Mass.g &lt;dbl&gt;, Mass.Method &lt;chr&gt;, Mass.Source &lt;chr&gt;, Mass.Comparison &lt;chr&gt;, ## # Mass.Comparison.Source &lt;chr&gt;, Island.Endemicity &lt;chr&gt;, ## # IUCN.Status.1.2 &lt;chr&gt;, Added.IUCN.Status.1.2 &lt;chr&gt;, Diet.Plant &lt;dbl&gt;, ## # Diet.Vertebrate &lt;dbl&gt;, Diet.Invertebrate &lt;dbl&gt;, Diet.Method &lt;chr&gt;, ## # Diet.Source &lt;chr&gt; Note the friendly output given by the tibble (as opposed to a data.frame). readr automatically stores the content it reads in a tibble, tidyverse oblige. You should know however that dplyr doesn’t require your data to be in a tibble, a regular data.frame will work just as fine. Most of the dplyr verbs covered in the next sections assume your data is tidy: wide format, variables as column, 1 observation per row. Not that tehy won’t work if your data isn’t tidy, but the results could be very different from what I’m going to show here. Fortunately, the phylacine trait dataset appears to be tidy: there is one unique entry for each species. The first operation I’m going to run on this table is changing the names with rename(). Some people prefer their tea without sugar, and I prefer my variable names without uppercase characters, dots or (if possible) numbers. This will give me the opportunity to introduce the trivial syntax of dplyr verbs. phylacine &lt;- phylacine %&gt;% dplyr::rename( &quot;binomial&quot; = Binomial.1.2, &quot;order&quot; = Order.1.2, &quot;family&quot; = Family.1.2, &quot;genus&quot; = Genus.1.2, &quot;species&quot; = Species.1.2, &quot;terrestrial&quot; = Terrestrial, &quot;marine&quot; = Marine, &quot;freshwater&quot; = Freshwater, &quot;aerial&quot; = Aerial, &quot;life_habit_method&quot; = Life.Habit.Method, &quot;life_habit_source&quot; = Life.Habit.Source, &quot;mass_g&quot; = Mass.g, &quot;mass_method&quot; = Mass.Method, &quot;mass_source&quot; = Mass.Source, &quot;mass_comparison&quot; = Mass.Comparison, &quot;mass_comparison_source&quot; = Mass.Comparison.Source, &quot;island_endemicity&quot; = Island.Endemicity, &quot;iucn_status&quot; = IUCN.Status.1.2, # not even for acronyms &quot;added_iucn_status&quot; = Added.IUCN.Status.1.2, &quot;diet_plant&quot; = Diet.Plant, &quot;diet_vertebrate&quot; = Diet.Vertebrate, &quot;diet_invertebrate&quot; = Diet.Invertebrate, &quot;diet_method&quot; = Diet.Method, &quot;diet_source&quot; = Diet.Source ) For convenience, I’m going to use the pipe operator (%&gt;%) that we’ve seen before, through this chapter. All dplyr functions are built to work with the pipe (i.e, their firstargument is always data), but again, this is not compulsory. I could do phylacine &lt;- dplyr::rename( data = phylacine, &quot;binomial&quot; = Binomial.1.2, # ... ) Note how columns are referred to. Once the data as been passed as an argument, no need to refer to it anymore, dplyr understands that you’re dealing with variables inside that data frame. So drop that data$var, data[, &quot;var&quot;], and, if you’ve read The R book, forget the very existence of attach(). Finally, I should mention that you can refer to variables names either with strings or directly as objects, whether you’re reading or creating them: phylacine2 &lt;- readr::read_csv(&quot;data/phylacine_traits.csv&quot;) phylacine2 %&gt;% dplyr::rename( # this works binomial = Binomial.1.2 ) phylacine2 %&gt;% dplyr::rename( # this works too! binomial = &quot;Binomial.1.2&quot; ) phylacine2 %&gt;% dplyr::rename( # guess what &quot;binomial&quot; = &quot;Binomial.1.2&quot; ) 3.3 Select variables with select() To extract a set of variables (i.e. columns), use the conveniently-named select(). phylacine_subset &lt;- phylacine %&gt;% dplyr::select( binomial, order, terrestrial, marine, freshwater, aerial ) phylacine_subset ## # A tibble: 5,831 x 6 ## binomial order terrestrial marine freshwater aerial ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abditomys_latidens Rodentia 1 0 0 0 ## 2 Abeomelomys_sevia Rodentia 1 0 0 0 ## 3 Abrawayaomys_ruschii Rodentia 1 0 0 0 ## 4 Abrocoma_bennettii Rodentia 1 0 0 0 ## 5 Abrocoma_boliviensis Rodentia 1 0 0 0 ## 6 Abrocoma_budini Rodentia 1 0 0 0 ## 7 Abrocoma_cinerea Rodentia 1 0 0 0 ## 8 Abrocoma_famatina Rodentia 1 0 0 0 ## 9 Abrocoma_shistacea Rodentia 1 0 0 0 ## 10 Abrocoma_uspallata Rodentia 1 0 0 0 ## # … with 5,821 more rows # Single variable phylacine %&gt;% dplyr::select(family) ## # A tibble: 5,831 x 1 ## family ## &lt;chr&gt; ## 1 Muridae ## 2 Muridae ## 3 Cricetidae ## 4 Abrocomidae ## 5 Abrocomidae ## 6 Abrocomidae ## 7 Abrocomidae ## 8 Abrocomidae ## 9 Abrocomidae ## 10 Abrocomidae ## # … with 5,821 more rows # A set of variables phylacine %&gt;% dplyr::select(genus, species, mass_g) ## # A tibble: 5,831 x 3 ## genus species mass_g ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Abditomys latidens 269 ## 2 Abeomelomys sevia 52 ## 3 Abrawayaomys ruschii 63 ## 4 Abrocoma bennettii 250 ## 5 Abrocoma boliviensis 158 ## 6 Abrocoma budini 361. ## 7 Abrocoma cinerea 250 ## 8 Abrocoma famatina 233. ## 9 Abrocoma shistacea 276. ## 10 Abrocoma uspallata 246. ## # … with 5,821 more rows # A range of variables phylacine %&gt;% dplyr::select(family:terrestrial) ## # A tibble: 5,831 x 4 ## family genus species terrestrial ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Muridae Abditomys latidens 1 ## 2 Muridae Abeomelomys sevia 1 ## 3 Cricetidae Abrawayaomys ruschii 1 ## 4 Abrocomidae Abrocoma bennettii 1 ## 5 Abrocomidae Abrocoma boliviensis 1 ## 6 Abrocomidae Abrocoma budini 1 ## 7 Abrocomidae Abrocoma cinerea 1 ## 8 Abrocomidae Abrocoma famatina 1 ## 9 Abrocomidae Abrocoma shistacea 1 ## 10 Abrocomidae Abrocoma uspallata 1 ## # … with 5,821 more rows select() can also exclude variables: phylacine %&gt;% dplyr::select(-binomial) ## # A tibble: 5,831 x 23 ## order family genus species terrestrial marine freshwater aerial ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Rode… Murid… Abdi… latide… 1 0 0 0 ## 2 Rode… Murid… Abeo… sevia 1 0 0 0 ## 3 Rode… Crice… Abra… ruschii 1 0 0 0 ## 4 Rode… Abroc… Abro… bennet… 1 0 0 0 ## 5 Rode… Abroc… Abro… bolivi… 1 0 0 0 ## 6 Rode… Abroc… Abro… budini 1 0 0 0 ## 7 Rode… Abroc… Abro… cinerea 1 0 0 0 ## 8 Rode… Abroc… Abro… famati… 1 0 0 0 ## 9 Rode… Abroc… Abro… shista… 1 0 0 0 ## 10 Rode… Abroc… Abro… uspall… 1 0 0 0 ## # … with 5,821 more rows, and 15 more variables: life_habit_method &lt;chr&gt;, ## # life_habit_source &lt;chr&gt;, mass_g &lt;dbl&gt;, mass_method &lt;chr&gt;, ## # mass_source &lt;chr&gt;, mass_comparison &lt;chr&gt;, mass_comparison_source &lt;chr&gt;, ## # island_endemicity &lt;chr&gt;, iucn_status &lt;chr&gt;, added_iucn_status &lt;chr&gt;, ## # diet_plant &lt;dbl&gt;, diet_vertebrate &lt;dbl&gt;, diet_invertebrate &lt;dbl&gt;, ## # diet_method &lt;chr&gt;, diet_source &lt;chr&gt; phylacine %&gt;% dplyr::select(-(binomial:species)) ## # A tibble: 5,831 x 19 ## terrestrial marine freshwater aerial life_habit_meth… life_habit_sour… mass_g ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 0 0 0 Reported IUCN. 2016. IUC… 269 ## 2 1 0 0 0 Reported IUCN. 2016. IUC… 52 ## 3 1 0 0 0 Reported IUCN. 2016. IUC… 63 ## 4 1 0 0 0 Reported IUCN. 2016. IUC… 250 ## 5 1 0 0 0 Reported IUCN. 2016. IUC… 158 ## 6 1 0 0 0 Reported IUCN. 2016. IUC… 361. ## 7 1 0 0 0 Reported IUCN. 2016. IUC… 250 ## 8 1 0 0 0 Reported IUCN. 2016. IUC… 233. ## 9 1 0 0 0 Reported IUCN. 2016. IUC… 276. ## 10 1 0 0 0 Reported IUCN. 2016. IUC… 246. ## # … with 5,821 more rows, and 12 more variables: mass_method &lt;chr&gt;, ## # mass_source &lt;chr&gt;, mass_comparison &lt;chr&gt;, mass_comparison_source &lt;chr&gt;, ## # island_endemicity &lt;chr&gt;, iucn_status &lt;chr&gt;, added_iucn_status &lt;chr&gt;, ## # diet_plant &lt;dbl&gt;, diet_vertebrate &lt;dbl&gt;, diet_invertebrate &lt;dbl&gt;, ## # diet_method &lt;chr&gt;, diet_source &lt;chr&gt; select() and rename() are pretty similar, and in fact, select() can also rename variables along the way: phylacine %&gt;% dplyr::select(&quot;fam&quot; = family) ## # A tibble: 5,831 x 1 ## fam ## &lt;chr&gt; ## 1 Muridae ## 2 Muridae ## 3 Cricetidae ## 4 Abrocomidae ## 5 Abrocomidae ## 6 Abrocomidae ## 7 Abrocomidae ## 8 Abrocomidae ## 9 Abrocomidae ## 10 Abrocomidae ## # … with 5,821 more rows And you can mix all of that at once: phylacine %&gt;% dplyr::select( &quot;fam&quot; = family, genus:freshwater, -terrestrial ) ## # A tibble: 5,831 x 5 ## fam genus species marine freshwater ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Muridae Abditomys latidens 0 0 ## 2 Muridae Abeomelomys sevia 0 0 ## 3 Cricetidae Abrawayaomys ruschii 0 0 ## 4 Abrocomidae Abrocoma bennettii 0 0 ## 5 Abrocomidae Abrocoma boliviensis 0 0 ## 6 Abrocomidae Abrocoma budini 0 0 ## 7 Abrocomidae Abrocoma cinerea 0 0 ## 8 Abrocomidae Abrocoma famatina 0 0 ## 9 Abrocomidae Abrocoma shistacea 0 0 ## 10 Abrocomidae Abrocoma uspallata 0 0 ## # … with 5,821 more rows 3.4 Select observations with filter() Conditional selection of observations is performed through filter(). The syntax uses conditions involving the variables, just as you would use for if statements or while loops. For example, I might want to extract mammals that are above a certain mass: phylacine %&gt;% has_rownames() ## [1] FALSE phylacine %&gt;% select(binomial) %&gt;% tibble::rownames_to_column() ## # A tibble: 5,831 x 2 ## rowname binomial ## &lt;chr&gt; &lt;chr&gt; ## 1 1 Abditomys_latidens ## 2 2 Abeomelomys_sevia ## 3 3 Abrawayaomys_ruschii ## 4 4 Abrocoma_bennettii ## 5 5 Abrocoma_boliviensis ## 6 6 Abrocoma_budini ## 7 7 Abrocoma_cinerea ## 8 8 Abrocoma_famatina ## 9 9 Abrocoma_shistacea ## 10 10 Abrocoma_uspallata ## # … with 5,821 more rows phylacine %&gt;% select(binomial) %&gt;% tibble::rowid_to_column() ## # A tibble: 5,831 x 2 ## rowid binomial ## &lt;int&gt; &lt;chr&gt; ## 1 1 Abditomys_latidens ## 2 2 Abeomelomys_sevia ## 3 3 Abrawayaomys_ruschii ## 4 4 Abrocoma_bennettii ## 5 5 Abrocoma_boliviensis ## 6 6 Abrocoma_budini ## 7 7 Abrocoma_cinerea ## 8 8 Abrocoma_famatina ## 9 9 Abrocoma_shistacea ## 10 10 Abrocoma_uspallata ## # … with 5,821 more rows 3.5 Create new variables with mutate() can also edit existing ones drop existing variables with transmute() 3.6 Grouped results with group_by() and summarise() 3.7 Scoped variables data(mtcars) mtcars %&gt;% select_all(toupper) is_whole &lt;- function(x) all(floor(x) == x) mtcars %&gt;% select_if() # select integers only mtcars %&gt;% select_at(vars(-contains(&quot;ar&quot;))) mtcars %&gt;% select_at(vars(-contains(&quot;ar&quot;), starts_with(&quot;c&quot;))) 3.8 More ! dolla sign x point operator variables values -&gt; dplyr::distinct() eq. to base::unique() sample_n() sample_frac() slice() "]
]
